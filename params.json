{"name":"APQuery.net","tagline":"APQuery.net is a open source ORM framework. Entity, Dal and Bpl everything is objectization, even SQL expression. Most close to the SQL syntax.","body":"APQuery.net\r\n===========\r\n\r\nAPQuery.net is a lightweight ORM, open source framework. With the objectization of the database, \r\nSQL expression, database access layout, business logic process and data entity.\r\n\r\n**<font size=\"+1\">Home page, documentation, and support links: http://leocaan.github.io/APQuery.net/</font>**\r\n\r\n**<font size=\"+1\">Some demos will be links: https://github.com/leocaan/APQuery.net-Demo/</font>**\r\n\r\n\r\nGetting Started\r\n---------------\r\n\r\n* Install **APQuery.net Library Package** from **Nuget**, search as the key \"APQuery\".\r\n* Install **APQuery.net Add-in** from **Expanded and updated**, \r\n  Visual Studio Menu -> Tools -> Expanded and updated, search as the key \"APQuery\".\r\n\r\n[![](http://i57.tinypic.com/16iv2j9.jpg)](http://i57.tinypic.com/16iv2j9.jpg)\r\n\r\n* Right click contextmenu on the project folder and click **Add new .apgen file**\r\n  to create a **business.apgen** file, this file is the ORM mapping file.\r\n\r\n[![](http://i58.tinypic.com/n32qv5.jpg)](http://i58.tinypic.com/n32qv5.jpg)\r\n\r\n* If you project is WebSite, ensure the file is in the **App_Code** folder will be auto generated.\r\n* Or if you project is WebApplication, right click context menu on the file and click\r\n  **Generate the .apgen file** item will be generated **business.apgen.cs** in project.\r\n\r\n[![](http://i59.tinypic.com/2638nmh.jpg)](http://i59.tinypic.com/2638nmh.jpg)\r\n\r\n* Edit **Global.asax**, add **Symber.Web.Compilation.APGenManager.SyncAndInitData();** in the\r\n  **Application_Start** method, that will be automatically create and maintain the DATABASE and\r\n  initialization data.\r\n\r\n\r\nAbout the .agpen file\r\n---------------------\r\n\r\n  Look at here simple, the details please refer to the documents.\r\n\r\n```xml\r\n<businessModel autoSyncDatabase=\"true\" autoInitDatabase=\"true\">\r\n  <tables>\r\n    <table name=\"Department\" comment=\"Departments of company\">\r\n      <columns>\r\n        <add name=\"DepartmentId\" type=\"int\" primaryKey=\"true\" identityType=\"Provider\"/>\r\n        <add name=\"ParentId\" type=\"int\" comment=\"Parent DepartmentId\"/>\r\n        <add name=\"DeptName\" type=\"string\" dataLength=\"20\"/>\r\n        <add name=\"Phone\" type=\"string\" dataLength=\"20\"/>\r\n      </columns>\r\n      <uniques>\r\n        <index name=\"IX_Department_DeptName\">\r\n          <add name=\"DeptName\" according=\"Asc\"/>\r\n        </index>\r\n      </uniques>\r\n      <aliases>\r\n        <add name=\"Parent\"/>\r\n      </aliases>\r\n    </table>\r\n\r\n    <table name=\"Employee\" comment=\"Employees of company\">\r\n      <columns>\r\n        <add name=\"EmployeeId\" type=\"int\" primaryKey=\"true\" identityType=\"Provider\"/>\r\n        <add name=\"DepartmentId\" type=\"int\" comment=\"Employee's DeparentId\"/>\r\n        <add name=\"Name\" type=\"string\" dataLength=\"30\"/>\r\n        <add name=\"Birthday\" type=\"DateTime\"/>\r\n        <add name=\"Email\" type=\"string\" dataLength=\"255\"/>\r\n      </columns>\r\n      <indexes>\r\n        <index name=\"IX_Employee_Name\" isDefault=\"true\">\r\n          <add name=\"Name\" according=\"Asc\"/>\r\n        </index>\r\n      </indexes>\r\n    </table>\t\t\t \r\n  </tables>\r\n</businessModel>\r\n```\r\n\r\n\r\nWhat objectizations does we have\r\n--------------------------------\r\n\r\n```\r\n---------------------------------------------------------------------\r\nEntity Defined                          |   Department\r\n---------------------------------------------------------------------\r\nDatabase Struct Defined                 |   APDBDef.Department\r\n---------------------------------------------------------------------\r\nData Access Layout (Dal) Defined        |   APDalDef.DepartmentDal\r\n---------------------------------------------------------------------\r\nBusiness Process Logic (Bpl) Defined    |   APBplDef.DepartmentBpl\r\n---------------------------------------------------------------------\r\n```\r\n\r\n\r\nUsage of ORM\r\n------------\r\n\r\n**Insert a data**\r\n```cs\r\nvar dep = new Department(1, 0, \"Sales\", \"000-000-0000\");\r\ndep.Insert();\r\n```\r\n\r\n**Delete a data**\r\n```cs\r\nDepartment.PrimaryDelete(1);\r\n```\r\n\r\n**Condition delete**\r\n```cs\r\n// short refer name\r\nvar t = APDBDef.Department;\r\nDepartment.ConditionDelete(t.ParentId == 0 & t.DeptName != \"Sales\");\r\n```\r\n\r\n**Get data with primary key and update**\r\n```cs\r\nvar dep = Department.PrimaryGet(1);\r\ndep.Phone = \"000-000-0001\";\r\ndep.Update();\r\n```\r\n\r\n**Partial update**\r\n```cs\r\nDepartment.UpdatePartial(1, new { Phone=\"000-000-5555\", DeptName=\"New Seals\"});\r\n```\r\n\r\n**Condition query and order**\r\n```cs\r\nvar t = APDBDef.Department;\r\nList<Department> list = Department.ConditionQuery(\r\n   t.ParentId == 0 & t.DeptName != \"Sales\",  // condition\r\n   t.DepartmentId.Desc);                     // order\r\n```\r\n\r\n**Paging query**\r\n```cs\r\nvar t = APDBDef.Department;\r\nList<Department> list = Department.ConditionQuery(\r\n   t.ParentId == 0 & t.DeptName != \"Sales\",  // condition\r\n   t.DepartmentId.Desc,                      // order\r\n   20, 20);       // take 20 records, skip ahead 20 records\r\n```\r\n\r\n**Query count**\r\n```cs\r\nDepartment.ConditionQueryCount(t.ParentId != 0);\r\n```\r\n\r\n**Transcation and Dal**\r\n```cs\r\nusing (APDBDef db = new APDBDef())\r\n{\r\n   db.BeginTrans();\r\n\r\n   try\r\n   {\r\n      db.DepartmentDal.PrimaryDelete(1);\r\n      db.EmployeeDal.ConditionDelete(APDBDef.Employee.DepartmentId == 1);\r\n\r\n      db.Commit();\r\n   }\r\n   catch\r\n   {\r\n      db.Rollback();\r\n   }\r\n}\r\n```\r\n\r\n\r\nUsage of SQL Expression\r\n-----------------------\r\nSometimes the ORM can't meet our requirement, so we can directly use SQL Expression.\r\nOf course, the core of ORM is also dependent on SQL Expression.\r\n\r\n**Asterisk Query**\r\n```cs\r\nvar dep = APDBDef.Department;\r\nusing (APDBDef db = new APDBDef())\r\n{\r\n   IEnumerable<Department> result = APQuery\r\n      .select(dep.Asterisk).distinct()\r\n      .from(dep)\r\n      .where(dep.ParentId == 0 & dep.Phone != null)\r\n      .order(dep.DeptName.Desc)\r\n      .query(db, dep.Map);\r\n}\r\n```\r\nExecute on SQLServer provider.\r\n```sql\r\nSELECT DISTINCT Department.* \r\n  FROM Department\r\n  WHERE Department.ParentId = 0 AND Department.Phone IS NOT NULL\r\n  ORDER BY Department.DeptName DESC\r\n```\r\n\r\nIn the following, we only write SQL Expression.\r\n\r\n**Value and through expression (New)**\r\n\r\n'~' is a escape character, a string startwith '~' while be through parse after expression.\r\n\r\n```cs\r\nAPQuery\r\n   .select(dep.DepartmentId, 3, \"abc\", \"~3*3\", null)\r\n   .from(dep);\r\n```\r\n```sql\r\nSELECT Department.DepartmentId, 3, 'abc', 3*3, NULL\r\n  FROM Department\r\n```\r\n\r\n**Column Alias**\r\n```cs\r\nAPQuery\r\n   .select(dep.DepartmentId, dep.DeptName.As(\"Name\"), dep.Phone.As(\"Dept Phone\"))\r\n   .from(dep);\r\n```\r\n```sql\r\nSELECT Department.DepartmentId, Department.DeptName AS Name,\r\n       Department.Phone AS [Dept Phone]\r\n  FROM Department\r\n```\r\n\r\n**Multi-table query**\r\n```cs\r\nvar d = APDBDef.Department;\r\nvar e = APDBDef.Employee;\r\nAPQuery\r\n   .select(e.EmployeeId, d.DeptName, e.Name)\r\n   .from(d, e.JoinInner(d.DepartmentId == e.DepartmentId))\r\n   .where(d.ParentId.NotIn(2, 3, 4));\r\n```\r\n```sql\r\nSELECT Employee.EmployeeId, Department.DeptName, Employee.Name\r\n  FROM Department\r\n  INNER JOIN Employee ON Department.DepartmentId == Employee.DepartmentId\r\n  WHERE Department.DepartmentId IN ( 2, 3, 4 )\r\n```\r\n\r\n**Alias table query**\r\n```cs\r\nvar d = APDBDef.Department;\r\nvar dp = APDBDef.Department.Parent;\r\nAPQuery\r\n   .select(d.DepartmentId, d.DeptName, dp.DeptName.As (\"ParentName\"))\r\n   .from(d, dp.JoinLeft(d.ParentId == dp.DepartmentId))\r\n   .where(dp.DeptName.Match(\"ale\"));\r\n```\r\n```sql\r\nSELECT Department.DepartmentId, Department.DeptName, Parent.DeptName AS 'ParentName'\r\n  FROM Department\r\n  LEFT JOIN Department AS Parent ON Department.ParentId == Parent.DepartmentId\r\n  WHERE Parent.DeptName LIKE '%ale%'\r\n```\r\n\r\n**Subquery**\r\n```cs\r\nvar d = APDBDef.Department;\r\nvar subQuery = APQuery\r\n   .select(d.DepartmentId)\r\n   .from(d)\r\n   .where(d.ParentId == 0);\r\nAPQuery\r\n   .select(d.Asterisk)\r\n   .from(d)\r\n   .where(subQuery.exist());\r\n```\r\n```sql\r\nSELECT Department.*\r\n  FROM Department\r\n  WHERE ( EXISTS (\r\n    SELECT Department.DepartmentId\r\n      FROM Department\r\n\t\tWHERE Department.ParentId = 0\r\n  ) )\r\n```\r\n\r\n**Paging Query**\r\n```cs\r\nvar d = APDBDef.Department;\r\nvar e = APDBDef.Employee;\r\nvar query = APQuery\r\n   .select(e.EmployeeId, e.Name, d.DeptName)\r\n   .from(e, d.JoinInner(e.DepartmentId == d.DepartmentId))\r\n   .primary(e.EmployeeId)\r\n   .take(20)\r\n   .skip(20);\r\n\r\nusing (APDBDef db = new APDBDef())\r\n{\r\n   int total = db.ExecuteSizeOfSelect(query);\r\n   IDataReader records = db.ExecuteReader(query);\r\n}\r\n```\r\nExecute on SQLServer provider.\r\n```sql\r\nSELECT COUNT(*)\r\n  FROM Employee,\r\n    INNER JOIN Department ON Employee.DepartmentId = Department.DepartmentId\r\n\r\nSELECT TOP 20 Employee.EmployeeId, Employee.Name, Department.DeptName\r\n  FROM Employee,\r\n    INNER JOIN Department ON Employee.DepartmentId = Department.DepartmentId\r\n  WHERE Employee.EmployeeId NOT IN (\r\n    SELECT TOP 20 Employee.EmployeeId\r\n\t   FROM Employee\r\n\t\t  INNER JOIN Department ON Employee.DepartmentId = Department.DepartmentId\r\n  )\r\n```\r\nExecute on Oracle provider.\r\n```sql\r\nSELECT COUNT(*)\r\n  FROM Employee,\r\n    INNER JOIN Department ON Employee.DepartmentId = Department.DepartmentId\r\n\r\nSELECT * FROM ( SELECT query_alias.*, ROWNUM query_rownum FROM (\r\n  SELECT Employee.EmployeeId, Employee.Name, Department.DeptName\r\n    FROM Employee,\r\n      INNER JOIN Department ON Employee.DepartmentId = Department.DepartmentId\r\n  ) query_alias WHERE ROWNUM <= 40 ) WHERE query_rownum > 20)\r\n```\r\n\r\n**Aggregation & Group By**\r\n```cs\r\nvar t = APDBDef.Department;\r\nvar e = APDBDef.Employee;\r\nAPQuery\r\n   .select(t.DepartmentId, t.DeptName, e.EmployeeId.Count())\r\n   .from(t, e.JoinLeft(t.DepartmentId == e.DepartmentId))\r\n   .group_by(t.DepartmentId, t.DeptName, e.EmployeeId)\r\n   .having(e.EmployeeId.Count() > 0);\r\n```\r\n```sql\r\nSELECT Department.DepartmentId, Department.DeptName, COUNT(Employee.EmployeeId)\r\nFROM Department\r\n     LEFT JOIN Employee ON Department.DepartmentId = Employee.DepartmentId\r\nGROUP BY Department.DepartmentId, Department.DeptName, Employee.EmployeeId\r\nHAVING COUNT(Employee.EmployeeId) > 0\r\n```\r\n\r\n**Aggregation with Date**\r\n```cs\r\nvar t = APDBDef.Employee;\r\nAPQuery\r\n   .select(t.Birthday.DateGroup(APSqlDateGroupMode.Month),\r\n\t   new APSqlAggregationExpr(t.Birthday.DateGroup(APSqlDateGroupMode.Month), APSqlAggregationType.COUNT)))\r\n   .from(t)\r\n   .group_by(t.Birthday.DateGroup(APSqlDateGroupMode.Month));\r\n```\r\nExecute on SQLServer provider.\r\n```sql\r\nSELECT DATEADD( mm, DATEDIFF( mm, 0, Employee.Birthday ), 0 ),\r\n   COUNT( DATEADD( mm, DATEDIFF( mm, 0, Employee.Birthday ), 0 ) )\r\n   FROM Employee\r\n   GROUP BY DATEADD( mm, DATEDIFF( mm, 0, Employee.Birthday ), 0 )\r\n```\r\nExecute on Oracle provider.\r\n```sql\r\nSELECT to_char(Employee.Birthday, 'yyyy-mm' ),\r\n   COUNT( to_char(Employee.Birthday, 'yyyy-mm' ) )\r\n   FROM Employee\r\n   GROUP BY to_char(Employee.Birthday, 'yyyy-mm' )\r\n```\r\n\r\n\r\n**Insert**\r\n```cs\r\nvar d = APDBDef.Department;\r\nAPQuery\r\n   .insert(d)\r\n      .set(d.DepartmentId, 5)\r\n      .set(d.DeptName, \"HR\")\r\n      .set(d.Phone, \"000-111-2222\");\r\n```\r\n```sql\r\nINSERT INTO Department\r\n  (Department.DepartmentId, Department.DeptName, Department.Phone)\r\n  Values (5, 'HR', '000-111-2222')\r\n```\r\n\r\n**Update**\r\n```cs\r\nvar d = APDBDef.Department;\r\nAPQuery\r\n   .update(d)\r\n      .set(d.Phone, \"000-111-3333\")\r\n   .where(d.DepartmentId == 5);\r\n```\r\n```sql\r\nUPDATE Department\r\n    SET Department.Phone = '000-111-3333'\r\n  WHERE Department.DepartmentId = 5\r\n```\r\n\r\n**Delete**\r\n```cs\r\nvar d = APDBDef.Department;\r\nAPQuery\r\n   .delete(d)\r\n   .where(d.ParentId == 0);\r\n```\r\n```sql\r\nDELETE Department\r\n  WHERE Department.ParentId = 0\r\n```\r\n\r\n**Anonymous return**\r\n```cs\r\nvar d = APDBDef.Department;\r\nvar query = APQuery\r\n   .select(d.DepartmentId, d.DeptName)\r\n   .from(d);\r\n\r\nusing (APDBDef db = new APDBDef())\r\n{\r\n   var records = db.Query(query, r =>\r\n   {\r\n      return new\r\n      {\r\n         id = d.DepartmentId.GetValue(r),\r\n         name = d.DeptName.GetValue(r)\r\n      };\r\n   });\r\n}\r\n```\r\n\r\n\r\n\r\nCopyright and license\r\n---------------------\r\nCopyright (c) 2014-2015 Leo Caan. The license see [LICENSE][license] file.\r\n\r\n\r\n\r\n[license]: LICENSE.md\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}